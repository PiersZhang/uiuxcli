#!/usr/bin/env node
'use strict';

var path = require('path')
var { mapper } = require('../src/script/helper')
var Fn = require('../src/script')

var obj = {}, key, service
var api = ['debug', 'dev', 'test', 'preview', 'build', 'proj']//, 'clean']
api = api.reduce((a,c)=>{a[c] = c;return a}, api)
var Services = {
    [api.debug]: ['generalDebug', {
            base: 1
            , repo: 1
            , port: 1
            , pull: 1
        }, 'dir' //no --xxx command
    ]
    , [api.dev]: [
        'coreDebug' //the function name
        , {
            repo: 1 // option to arguments of func above, 1 means directly use the value
            , port: 1
            , pull: 1
            , branches: 'csv2arr' //string means the function name in mapper
            , start: ['branches', 1] //array means pass the option value to the function branchesFn's second argument, then send the result to the branches 
            , remote: ['branches', 0]
        }
        , 'dir' //the last option to arguments of func above, which is no prefex double dash
        , ['repo', 'branches'] //mandatory option
    ]
    , [api.test]: [
        'runTest'
        , {
            src: 1
            , domains: 1
        }
        , 'dir'
    ]
    , [api.preview]: [
        'runPreviewer'
        , {
        }
        , 'dir'
    ]
    , [api.build]: [
        'releaseOne'
        , {
            mode: 1
        }
        , 'dir' //the last option to arguments of func above, which is no prefex double dash
    ]
    , [api.proj]: [
        'projCrud'
        , {
            add: 1
            , delete: 1
        }
        , 'dir' //the last option to arguments of func above, which is no prefex double dash
    ]
}

function svc(csv){
    var c = csv.split(',')
    return [c[0], c[1], c[0] + ' --'+c[1] +' <args>']
}

function help(status, arg) {
    var print = (status === 0) ? console.log : console.error
    var cmd = path.basename(process.argv[1])
    switch(status){
        case 1: 
            print('no valid service availalbe')
            break
        case 2: 
            print('the service is not found: '+ arg)
            break
        case 3: 
            var [s, o, c] = svc(arg)
            print('the option "--'+o+'" is not found: '+ cmd + ' '+ c)
            break
        case 4: 
            var [ o, c] = svc(arg)
            print('the args is not found : '+ cmd + ' '+ c)
            break


    }
    print()
    print("Usage: " + cmd + " ["+api.join(' | ')+"] [--<options> <args>] [<dir>]")
    for(var i in Services){
        print('\tThe avaialbe options for service "' + i+'"')
        for(var j in Services[i][1]){
            print('\t\t --'+j+' <args>')
        }
    }
    process.exit(status);
}
var cwd = process.cwd()


var defaults = (arg)=>{
    var curRemote, repo, curBranch, branches = ['master']
    if(arg === api.debug || arg === api.dev){
        try{
            curRemote = mapper.currentRemote()
        }
        catch(e){}

        if(curRemote){
            repo = mapper.repoFn(curRemote)
            curBranch = mapper.currentBranch()
            branches = mapper.branchesFn(curRemote, curBranch)
        }
    }
    switch(arg){
        case api.debug:
            return {
                dir: cwd
                , base: path.resolve(cwd, '..')
                , repo
                , port: 1234
            }
        case api.dev: 
            return {
                dir: repo? path.resolve(cwd, '..'): cwd
                , repo
                , branches
                , port: 1234
            }
        case api.test: 
            return {
                dir: cwd
                , src: 'src'
            }
        case api.build: 
            return {
                dir: repo? path.resolve(cwd, '..'): cwd
                , repo
                , branch: curBranch
            }
        
    }
    return {}

} 
// console.log(__dirname)
var Invoker = {}
var curSvc, curKey
for (var i = 2; i < process.argv.length; ++i) {
    var arg = process.argv[i];
    if(!service){
        if(i > 2) help(1)
        if(Services[arg]){
            service = Services[arg]
            obj = {...defaults(arg)}//{...defaults[arg]}
            curSvc = arg
            continue
        }
        else{
            // service is not found
            help(2, arg)
        }
    }
    
    if (key) {
        if(!arg){
            help(4, `${curSvc},${curKey}`)
        }
        if(Array.isArray(key)){
            var [fn, index] = key
            if(!Invoker[fn]) Invoker[fn] = []
            Invoker[fn][index] = arg
            if(obj[fn]) obj[fn] = null
        }
        else if (typeof key === 'function'){
            obj[curKey] = key(arg)
        }
        else {
            obj[key] = arg
        }
        key = null
    }
    else if (arg.substr(0, 2) === '--'){
        var k = curKey = arg.substr(2)
        var cmd = service[1][k]
        if(cmd === 1){
            key = k
        }
        else if(typeof cmd === 'string'){
            key = mapper[cmd]
        }
        else if(Array.isArray(cmd)){
            key = cmd
        }
        else {
            help(3, `${curSvc},${curKey}`)
        }
    }
    else{
        if(arg[0] === '.') 
            arg = path.resolve(cwd, arg)
        obj[service[2]] = arg
    }

}

if(service[2] && !obj[service[2]]){
    obj[service[2]] = path.resolve(cwd, '.')
}

if(!curSvc){
    help(1)
}
if(key){
    help(4, `${curSvc},${curKey}`)
}
for(var i in Invoker){
    if(mapper[i+'Fn']){
        obj[i] = obj[i] || mapper[i+'Fn'].apply(null, Invoker[i])
    }
}
console.log(JSON.stringify(obj, null, 2))
if(service[3])
    for(var s of service[3]){
        if(obj[s] === undefined){
            help(3, `${curSvc},${s}`)
        }
    }
Fn[service[0]](obj)